# -*- coding: utf-8 -*-
"""Spam_Mail_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lw3y3hxdcY3kKuU-RpRDgTZndCwq5sri

Importing Dependencies.
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Pre-Processing"""

# Loading the data from .csv file to a pandas Dataframe
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# replace the null values with the null string.
mail_data  = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data

mail_data.head()

# checking the number of rows and columns in the dataframe
mail_data.shape

"""Label Encoding"""

# label spam mail as 0 and ham mail as 1.
mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

# sepearating the data as text and label
X = mail_data['Message']

Y = mail_data['Category']

X

Y

"""Splitting the data into Training data and Test data."""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""Feature Extraction"""

# transform the text data into feature vectors that can be used as input to the logistic regression

feature_extraction = TfidfVectorizer(min_df = 1, stop_words = 'english', lowercase = True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_features)

"""Training the Model (Logistic Regression)"""

model = LogisticRegression()

# Training the logitic regression model with the training data
model.fit(X_train_features,Y_train)

"""Evaluating the trained model."""

# prediction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train,prediction_on_training_data)

print('The accuracy on training data is: ', accuracy_on_training_data)

# prediction on test data

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test,prediction_on_test_data)

print('The accuracy on test data is: ', accuracy_on_test_data)

"""Building a Predictive System"""

input_mail = ["Hey you told your name to gautham ah?"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction
prediction_on_input_mail = model.predict(input_data_features)
print(prediction_on_input_mail)

if (prediction_on_input_mail[0] == 1):
    print("Ham Mail")
else:
    print("Spam Mail")